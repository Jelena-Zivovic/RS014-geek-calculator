Terminals unused in grammar

    '/'
    '!'


State 32 conflicts: 1 shift/reduce


Grammar

    0 $accept: pocetak $end

    1 pocetak: E

    2 E: E '+' E
    3  | E '*' E
    4  | E '-' E
    5  | E '*' NUMBER
    6  | NUMBER '*' E
    7  | INV '(' E ')'
    8  | NORM '(' E ')'
    9  | TRANS '(' E ')'
   10  | DET '(' E ')'
   11  | E '^' NUMBER
   12  | '-' E
   13  | '(' E ')'
   14  | A
   15  | B


Terminals, with rules where they appear

    $end (0) 0
    '!' (33)
    '(' (40) 7 8 9 10 13
    ')' (41) 7 8 9 10 13
    '*' (42) 3 5 6
    '+' (43) 2
    '-' (45) 4 12
    '/' (47)
    '^' (94) 11
    error (256)
    INV (258) 7
    DET (259) 10
    NORM (260) 8
    TRANS (261) 9
    UMINUS (262)
    NUMBER <value> (263) 5 6 11
    A <variable> (264) 14
    B <variable> (265) 15


Nonterminals, with rules where they appear

    $accept (19)
        on left: 0
    pocetak (20)
        on left: 1
        on right: 0
    E <m> (21)
        on left: 2 3 4 5 6 7 8 9 10 11 12 13 14 15
        on right: 1 2 3 4 5 6 7 8 9 10 11 12 13


State 0

    0 $accept: . pocetak $end

    '-'     shift, and go to state 1
    INV     shift, and go to state 2
    DET     shift, and go to state 3
    NORM    shift, and go to state 4
    TRANS   shift, and go to state 5
    NUMBER  shift, and go to state 6
    A       shift, and go to state 7
    B       shift, and go to state 8
    '('     shift, and go to state 9

    pocetak  go to state 10
    E        go to state 11


State 1

   12 E: '-' . E

    '-'     shift, and go to state 1
    INV     shift, and go to state 2
    DET     shift, and go to state 3
    NORM    shift, and go to state 4
    TRANS   shift, and go to state 5
    NUMBER  shift, and go to state 6
    A       shift, and go to state 7
    B       shift, and go to state 8
    '('     shift, and go to state 9

    E  go to state 12


State 2

    7 E: INV . '(' E ')'

    '('  shift, and go to state 13


State 3

   10 E: DET . '(' E ')'

    '('  shift, and go to state 14


State 4

    8 E: NORM . '(' E ')'

    '('  shift, and go to state 15


State 5

    9 E: TRANS . '(' E ')'

    '('  shift, and go to state 16


State 6

    6 E: NUMBER . '*' E

    '*'  shift, and go to state 17


State 7

   14 E: A .

    $default  reduce using rule 14 (E)


State 8

   15 E: B .

    $default  reduce using rule 15 (E)


State 9

   13 E: '(' . E ')'

    '-'     shift, and go to state 1
    INV     shift, and go to state 2
    DET     shift, and go to state 3
    NORM    shift, and go to state 4
    TRANS   shift, and go to state 5
    NUMBER  shift, and go to state 6
    A       shift, and go to state 7
    B       shift, and go to state 8
    '('     shift, and go to state 9

    E  go to state 18


State 10

    0 $accept: pocetak . $end

    $end  shift, and go to state 19


State 11

    1 pocetak: E .
    2 E: E . '+' E
    3  | E . '*' E
    4  | E . '-' E
    5  | E . '*' NUMBER
   11  | E . '^' NUMBER

    '+'  shift, and go to state 20
    '-'  shift, and go to state 21
    '*'  shift, and go to state 22
    '^'  shift, and go to state 23

    $default  reduce using rule 1 (pocetak)


State 12

    2 E: E . '+' E
    3  | E . '*' E
    4  | E . '-' E
    5  | E . '*' NUMBER
   11  | E . '^' NUMBER
   12  | '-' E .

    '^'  shift, and go to state 23

    $default  reduce using rule 12 (E)


State 13

    7 E: INV '(' . E ')'

    '-'     shift, and go to state 1
    INV     shift, and go to state 2
    DET     shift, and go to state 3
    NORM    shift, and go to state 4
    TRANS   shift, and go to state 5
    NUMBER  shift, and go to state 6
    A       shift, and go to state 7
    B       shift, and go to state 8
    '('     shift, and go to state 9

    E  go to state 24


State 14

   10 E: DET '(' . E ')'

    '-'     shift, and go to state 1
    INV     shift, and go to state 2
    DET     shift, and go to state 3
    NORM    shift, and go to state 4
    TRANS   shift, and go to state 5
    NUMBER  shift, and go to state 6
    A       shift, and go to state 7
    B       shift, and go to state 8
    '('     shift, and go to state 9

    E  go to state 25


State 15

    8 E: NORM '(' . E ')'

    '-'     shift, and go to state 1
    INV     shift, and go to state 2
    DET     shift, and go to state 3
    NORM    shift, and go to state 4
    TRANS   shift, and go to state 5
    NUMBER  shift, and go to state 6
    A       shift, and go to state 7
    B       shift, and go to state 8
    '('     shift, and go to state 9

    E  go to state 26


State 16

    9 E: TRANS '(' . E ')'

    '-'     shift, and go to state 1
    INV     shift, and go to state 2
    DET     shift, and go to state 3
    NORM    shift, and go to state 4
    TRANS   shift, and go to state 5
    NUMBER  shift, and go to state 6
    A       shift, and go to state 7
    B       shift, and go to state 8
    '('     shift, and go to state 9

    E  go to state 27


State 17

    6 E: NUMBER '*' . E

    '-'     shift, and go to state 1
    INV     shift, and go to state 2
    DET     shift, and go to state 3
    NORM    shift, and go to state 4
    TRANS   shift, and go to state 5
    NUMBER  shift, and go to state 6
    A       shift, and go to state 7
    B       shift, and go to state 8
    '('     shift, and go to state 9

    E  go to state 28


State 18

    2 E: E . '+' E
    3  | E . '*' E
    4  | E . '-' E
    5  | E . '*' NUMBER
   11  | E . '^' NUMBER
   13  | '(' E . ')'

    '+'  shift, and go to state 20
    '-'  shift, and go to state 21
    '*'  shift, and go to state 22
    '^'  shift, and go to state 23
    ')'  shift, and go to state 29


State 19

    0 $accept: pocetak $end .

    $default  accept


State 20

    2 E: E '+' . E

    '-'     shift, and go to state 1
    INV     shift, and go to state 2
    DET     shift, and go to state 3
    NORM    shift, and go to state 4
    TRANS   shift, and go to state 5
    NUMBER  shift, and go to state 6
    A       shift, and go to state 7
    B       shift, and go to state 8
    '('     shift, and go to state 9

    E  go to state 30


State 21

    4 E: E '-' . E

    '-'     shift, and go to state 1
    INV     shift, and go to state 2
    DET     shift, and go to state 3
    NORM    shift, and go to state 4
    TRANS   shift, and go to state 5
    NUMBER  shift, and go to state 6
    A       shift, and go to state 7
    B       shift, and go to state 8
    '('     shift, and go to state 9

    E  go to state 31


State 22

    3 E: E '*' . E
    5  | E '*' . NUMBER

    '-'     shift, and go to state 1
    INV     shift, and go to state 2
    DET     shift, and go to state 3
    NORM    shift, and go to state 4
    TRANS   shift, and go to state 5
    NUMBER  shift, and go to state 32
    A       shift, and go to state 7
    B       shift, and go to state 8
    '('     shift, and go to state 9

    E  go to state 33


State 23

   11 E: E '^' . NUMBER

    NUMBER  shift, and go to state 34


State 24

    2 E: E . '+' E
    3  | E . '*' E
    4  | E . '-' E
    5  | E . '*' NUMBER
    7  | INV '(' E . ')'
   11  | E . '^' NUMBER

    '+'  shift, and go to state 20
    '-'  shift, and go to state 21
    '*'  shift, and go to state 22
    '^'  shift, and go to state 23
    ')'  shift, and go to state 35


State 25

    2 E: E . '+' E
    3  | E . '*' E
    4  | E . '-' E
    5  | E . '*' NUMBER
   10  | DET '(' E . ')'
   11  | E . '^' NUMBER

    '+'  shift, and go to state 20
    '-'  shift, and go to state 21
    '*'  shift, and go to state 22
    '^'  shift, and go to state 23
    ')'  shift, and go to state 36


State 26

    2 E: E . '+' E
    3  | E . '*' E
    4  | E . '-' E
    5  | E . '*' NUMBER
    8  | NORM '(' E . ')'
   11  | E . '^' NUMBER

    '+'  shift, and go to state 20
    '-'  shift, and go to state 21
    '*'  shift, and go to state 22
    '^'  shift, and go to state 23
    ')'  shift, and go to state 37


State 27

    2 E: E . '+' E
    3  | E . '*' E
    4  | E . '-' E
    5  | E . '*' NUMBER
    9  | TRANS '(' E . ')'
   11  | E . '^' NUMBER

    '+'  shift, and go to state 20
    '-'  shift, and go to state 21
    '*'  shift, and go to state 22
    '^'  shift, and go to state 23
    ')'  shift, and go to state 38


State 28

    2 E: E . '+' E
    3  | E . '*' E
    4  | E . '-' E
    5  | E . '*' NUMBER
    6  | NUMBER '*' E .
   11  | E . '^' NUMBER

    '^'  shift, and go to state 23

    $default  reduce using rule 6 (E)


State 29

   13 E: '(' E ')' .

    $default  reduce using rule 13 (E)


State 30

    2 E: E . '+' E
    2  | E '+' E .
    3  | E . '*' E
    4  | E . '-' E
    5  | E . '*' NUMBER
   11  | E . '^' NUMBER

    '*'  shift, and go to state 22
    '^'  shift, and go to state 23

    $default  reduce using rule 2 (E)


State 31

    2 E: E . '+' E
    3  | E . '*' E
    4  | E . '-' E
    4  | E '-' E .
    5  | E . '*' NUMBER
   11  | E . '^' NUMBER

    '*'  shift, and go to state 22
    '^'  shift, and go to state 23

    $default  reduce using rule 4 (E)


State 32

    5 E: E '*' NUMBER .
    6  | NUMBER . '*' E

    '*'  shift, and go to state 17

    '*'       [reduce using rule 5 (E)]
    $default  reduce using rule 5 (E)


State 33

    2 E: E . '+' E
    3  | E . '*' E
    3  | E '*' E .
    4  | E . '-' E
    5  | E . '*' NUMBER
   11  | E . '^' NUMBER

    '^'  shift, and go to state 23

    $default  reduce using rule 3 (E)


State 34

   11 E: E '^' NUMBER .

    $default  reduce using rule 11 (E)


State 35

    7 E: INV '(' E ')' .

    $default  reduce using rule 7 (E)


State 36

   10 E: DET '(' E ')' .

    $default  reduce using rule 10 (E)


State 37

    8 E: NORM '(' E ')' .

    $default  reduce using rule 8 (E)


State 38

    9 E: TRANS '(' E ')' .

    $default  reduce using rule 9 (E)
